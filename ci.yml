name: Python CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:

    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.6, 3.7, 3.8]

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 0 # fetch all history so that tags are available
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest

    # This step will run only if the previous steps were successful and the branch is main    
    - name: Bump version and tag release
      if: github.ref == 'refs/heads/main' && success()
      run : |
        # Get the latest tag name 
        git fetch --prune --unshallow 
        latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
        
        # Extract the year, month, day and patch number from the latest tag 
        IFS='.' read -ra ver <<< "${latest_tag//v/}"
        
        year=${ver[0]}
        month=${ver[1]}
        day=${ver[2]}
        
	# Increment patch number by one 
	patch=$((10#${ver[3]} + 1))
	
	# Get current date in YYYY MM DD format 
	current_date=$(date +'%Y %m %d')
	IFS=' ' read -ra date <<< "$current_date"
	
	# Compare current date with latest tag date 
	if [ ${date[0]} == $year ] && [ ${date[1]} == $month ] && [ ${date[2]} == $day ]; then
	
	  # If same date, use existing year, month and day but increment patch number 
	  new_tag="v$year.$month.$day.$patch"
	  
	else
	
	  # If different date, use current year, month and day and reset patch number to zero 
	  new_tag="v${date[0]}.${date[1]}.${date[2]}.0"
	  
	fi
	
	# Update version.py file with new tag 
	echo "version = '$new_tag'" > version.py
	
	# Commit version.py file with message "Bump to <new_tag>" 
	git config user.name github-actions
	git config user.email github-actions@github.com
	
	git add version.py 
	
	git commit -m "Bump to $new_tag"
	
	# Push commit to main branch  
	git push origin main 
	
	# Create annotated tag for new release  
	git tag -a $new_tag -m "Release $new_tag"
	
	# Push tag to remote  
	git push origin $new_tag
